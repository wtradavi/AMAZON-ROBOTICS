####################       TEMPLATES         #######################################

function drive_template {
    logo
    choose_selected_prompt

    if ! [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        logo
        echo -e $RS"\nDrive(s):"$CE
        read -A du
    fi

    for drive in ${du[@]}; do
        echo -e $RS"\nRunning Command To Drive $drive\n"$CE
        #command
    done

    go_back_or_exit
}

function station_template {

    logo
    choose_selected_prompt

    if ! [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        logo
        echo -e $RS"\nStation(s)"$CE
        read -A du
        
    fi

    for station in ${du[@]}; do
        floor="paKivaA0$station[1]"
        echo -e $RS"\nRunning Command on Station $station\n"$CE
        #command
    done

    go_back_or_exit
}

###########################      UNASSIGNED FUNCTIONS       ######################################


function unstuck_drive {
    logo
    echo -e $RS"SSH Selected Drive(s)? y/n"$CE
    prompt_num

    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        for drive in ${du[@]}; do
            ssh root@kdu-$i "sudo mkdir -p /var/log/kiva; /sbin/reboot & exit"
        done 
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        ssh root@kdu-$du "sudo mkdir -p /var/log/kiva; /sbin/reboot & exit"
    fi
}



function create_drive_function {
    
    echo -e \$RS"Name of Function: "\$CE
    read -r name
    echo -e \$RS"Command: "\$CE
    read -r command
    echo -e \$RS"**********MESSAGE*********"\$CE
    echo -e \$RS"_____________________ Drive xxxxxx"\$CE
    read -r message
    echo "function $name {
    logo
    choose_selected_prompt

    if ! [[ \$ANSWER = "y" ]] || [[ \$ANSWER = "Y" ]]; then
        logo
        echo \$RS"Drive(s):"\$CE
        read -A du
    fi

    for drive in \${du[@]}; do
        echo -e \$RS"$message Drive \$drive"\$CE
        $command
    done

    go_back_or_exit
}
"
}


function complete_drive {
    logo
    choose_selected_prompt

    if ! [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        logo
        echo -e $RS"\nDrive(s):"$CE
        read -A du
    fi

    for drive in ${du[@]}; do
        echo -e $RS"\nRunning Command To Drive $drive\n"$CE
        #command
    done

    go_back_or_exit
}

function ping_drive {
  choose_selected_prompt Ping

  if [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
    drive_prompt
    i=0
    echo " "
    columnize 10 "Drive" "Wifi"

    for drive in ${du[@]}; do
      let "i=i+1"
      packet_loss=$(ping -w 1 -c 2 kdu-$drive | grep received | cut -d "," -f 3 | cut -d "%" -f 1)
      columnize 10 "$(echo -e $YS $i $CE)" "$drive" "$(if [[ $packet_loss == *"100"* ]]; then echo -e $RS"$(( 100 - $packet_loss))%"$CE; else echo -e $GNS"$(( 100 - $packet_loss))%"$CE; fi)"
    done

    echo " "
    echo " "

  elif [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
    i=0
    logo
    echo " "
    columnize 10 "Drive" "Wifi"

    for drive in ${du[@]}; do
      let "i=i+1"
      packet_loss=$(ping -w 1 -c 2 kdu-$drive | grep received | cut -d "," -f 3 | cut -d "%" -f 1)
      columnize 10 "$(echo -e $YS $i $CE)" "$drive" "$(if [[ $packet_loss == *"100"* ]]; then echo -e $RS"$(( 100 - $packet_loss))%"$CE; else echo -e $GNS"$(( 100 - $packet_loss))%"$CE; fi)"
    done

    echo " "
    echo " "

  else
    echo -e $RS"Something Went Wrong"
    go_back_or_exit
  fi
  go_back_or_exit
}


function menu_list {
  load_batch_lists
  
  num=0
  for letter in ${alphabet[@]}; do
      let "num=num+1"
  if [[ $(eval echo '$'$letter) > 0 ]]; then 
      eval 'menu_item'$num'="$(if [[ $'$letter' = " " ]]; then echo " "; else echo -e $FONTC"  $num"$CE" - "$'$letter'; fi)"'
  else
      continue
  fi
  done

  item_count=0
  for item in 'menu_item'{1..102}; do
    if [[ $(eval echo '$'$item) = "" ]] ; then 
      continue
    else
      let "item_count=item_count+1"
    fi
  done
  total_menu_items=$item_count
  items_per_column=$(($total_menu_items/3))
  last_item_first_column=$items_per_column
  first_item_second_column=$(($last_item_first_column + 1))
  last_item_second_column=$(($items_per_column * 2))
  first_item_third_column=$(($last_item_second_column + 1))
  last_item_third_column=$(($items_per_column * 3))

  PH=0
  for item in {1..$last_item_first_column}; do 
      let "PH=PH+1"
      eval 'placeholder'$PH'=$menu_item'$item
  done
  PH=25
  for item in {$first_item_second_column..$last_item_second_column}; do
      let "PH=PH+1"
      eval 'placeholder'$PH'=$menu_item'$item 
  done
  PH=50
  for item in {$first_item_third_column..$last_item_third_column}; do 
      let "PH=PH+1"
      eval 'placeholder'$PH'=$menu_item'$item 
  done
    logo

  #Display Menu
	columnize 4 $placeholder1  $placeholder26  $placeholder51 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    new) $CE    Create a batch list"; fi)"
  columnize 4 $placeholder2  $placeholder27  $placeholder52 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS  close) $CE    Delete current list"; fi)"
  columnize 4 $placeholder3  $placeholder28  $placeholder53 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    add) $CE    Add drive(s) to list"; fi)"
  columnize 4 $placeholder4  $placeholder29  $placeholder54 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    del) $CE    Remove drive(s) from list"; fi)"
  columnize 4 $placeholder5  $placeholder30  $placeholder55 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    all) $CE    Select all drives in list"; fi)"
  columnize 4 $placeholder6  $placeholder31  $placeholder56 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS   none) $CE    Unselect all drives in list"; fi)" 
  columnize 4 $placeholder7  $placeholder32  $placeholder57 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS   done) $CE    Mark drive(s) as done"; fi)"
  if [[ $items_per_column > 8 ]]; then columnize 4 $placeholder9  $placeholder34  $placeholder59 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    review) $CE    Review completed drives"; fi)"; else columnize 2 $(echo -e $BLS"."$CE) $(echo -e $BLS"."$CE) $(echo -e $BLS"."$CE) "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    review) $CE    Review completed drives"; fi)"; fi
  if [[ $items_per_column > 9 ]]; then columnize 4 $placeholder9  $placeholder34  $placeholder59; fi
  if [[ $items_per_column > 10 ]]; then columnize 4 $placeholder10  $placeholder35  $placeholder60; fi
  if [[ $items_per_column > 11 ]]; then columnize 4 $placeholder11  $placeholder36  $placeholder61; fi
  if [[ $items_per_column > 12 ]]; then columnize 4 $placeholder12  $placeholder37  $placeholder62; fi
  if [[ $items_per_column > 13 ]]; then columnize 4 $placeholder13  $placeholder38  $placeholder63; fi
  if [[ $items_per_column > 14 ]]; then columnize 4 $placeholder14  $placeholder39  $placeholder64; fi
  if [[ $items_per_column > 15 ]]; then columnize 4 $placeholder15  $placeholder40  $placeholder65; fi
  if [[ $items_per_column > 16 ]]; then columnize 4 $placeholder16  $placeholder41  $placeholder66; fi
  if [[ $items_per_column > 17 ]]; then columnize 4 $placeholder17  $placeholder42  $placeholder67; fi
  if [[ $items_per_column > 18 ]]; then columnize 4 $placeholder18  $placeholder43  $placeholder68; fi
  if [[ $items_per_column > 19 ]]; then columnize 4 $placeholder19  $placeholder44  $placeholder69; fi
  if [[ $items_per_column > 20 ]]; then columnize 4 $placeholder20  $placeholder45  $placeholder70; fi
  if [[ $items_per_column > 21 ]]; then columnize 4 $placeholder21  $placeholder46  $placeholder71; fi
  if [[ $items_per_column > 22 ]]; then columnize 4 $placeholder22  $placeholder47  $placeholder72; fi
  if [[ $items_per_column > 23 ]]; then columnize 4 $placeholder23  $placeholder48  $placeholder73; fi
  if [[ $items_per_column > 24 ]]; then columnize 4 $placeholder24  $placeholder49  $placeholder74; fi
  if [[ $items_per_column > 25 ]]; then columnize 4 $placeholder25  $placeholder50  $placeholder75; fi
  echo " "
  echo -e "$RS" b"$CE- Go Back"
  echo -e "$RS" 0"$CE- Exit"
  echo " "
	echo -n "Choose: "
  }
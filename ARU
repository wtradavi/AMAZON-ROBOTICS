set opt interactive_comments
exec 2> /dev/null
# Current Batch List
batchlist=
# List of Batch Lists
batches=()
# Start off with No Selected Drives
clear_selection
facility=$(echo $HOSTNAME | cut -d "-" -f 3)
FACILITY=$(echo $HOSTNAME | cut -d "-" -f 3 | tr a-z A-Z)
alphabet=(a b c d e f g h i j k l m n o p q r s t u v w x y z 
    aa ab ac ad ae af ag ah ai aj ak al am an ao ap aq ar as at au av aw ax ay az
    ba bb bc bd be bf bg bh bi bj bk bl bm bn bo bp bq br bs bt bu bv bw bx by bz
    ca cb cc cd ce cf cg ch ci cj ck cl cm cn co cp cq cr cs ct cu cv cw cx cy cz
    da db dc dd de df dg dh di dj dk dl dm dn do dp dq dr ds dt du dv dw dx dy dz)

function logo {
  FONTC=$YS
  LOGOC=$RS
  YS="\e[1;33m"
  BS="\e[0;34m"
  CE="\e[0m"
  RS="\e[1;31m"
  BLS="\e[0;30m"
  DGYS="\e[1;30m"
  LBS="\e[1;34m"
  GNS="\e[0;32m"
  LGNS="\e[1;32m"
  CYS="\e[0;36m"
  LCYS="\e[1;36m"
  DRS="\e[0;31m"
  PS="\e[0;35m"
  LPS="\e[1;35m"
  BRS="\e[0;33m"
  LGYS="\e[0;37m"
  WHS="\e[1;37m" &&
  clear
  echo -e $GNS" Logged Into $HOSTNAME"$CE
  echo ""
  echo ""
  echo -e $LOGOC"                    : :   :    :   ::   ::::::  ::::  :    :     "$CE $GNS"               BATCH LISTS: $batchlist            "$CE
  echo -e $LOGOC"                   :   :  ::  ::  :  :      :  :    : ::   :     "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "a1)"; elif [ $a2_enabled ]; then echo $YS"a2)"$CE; else echo $PS"a2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[1]}; else eval echo '${'$batchlist'[1]}'; fi)"$CE
  echo -e $LOGOC"                  :     : : :: : :    :    :   :    : : :  :     "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "b1)"; elif [ $b2_enabled ]; then echo $YS"b2)"$CE; else echo $PS"b2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[2]}; else eval echo '${'$batchlist'[2]}'; fi)"$CE
  echo -e $LOGOC"                  ::::::: :    : ::::::   :    :    : :  : :     "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "c1)"; elif [ $c2_enabled ]; then echo $YS"c2)"$CE; else echo $PS"c2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[3]}; else eval echo '${'$batchlist'[3]}'; fi)"$CE
  echo -e $LOGOC"                  :     : :    : :    :  :     :    : :   ::     "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "d1)"; elif [ $d2_enabled ]; then echo $YS"d2)"$CE; else echo $PS"d2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[4]}; else eval echo '${'$batchlist'[4]}'; fi)"$CE
  echo -e $LOGOC"                  :     : :    : :    : ::::::  ::::  :    :     "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "e1)"; elif [ $e2_enabled ]; then echo $YS"e2)"$CE; else echo $PS"e2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[5]}; else eval echo '${'$batchlist'[5]}'; fi)"$CE
  echo -e $LOGOC"                                                                 "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "f1)"; elif [ $f2_enabled ]; then echo $YS"f2)"$CE; else echo $PS"f2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[6]}; else eval echo '${'$batchlist'[6]}'; fi)"$CE
  echo -e $LOGOC"              ::::::                                             "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "g1)"; elif [ $g2_enabled ]; then echo $YS"g2)"$CE; else echo $PS"g2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[7]}; else eval echo '${'$batchlist'[7]}'; fi)"$CE
  echo -e $LOGOC"              :     :  ::::  :::::   ::::  ::::: :  ::::   ::::  "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "h1)"; elif [ $h2_enabled ]; then echo $YS"h2)"$CE; else echo $PS"h2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[8]}; else eval echo '${'$batchlist'[8]}'; fi)"$CE
  echo -e $LOGOC"              :     : :    : :    : :    :   :   : :    : :      "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "i1)"; elif [ $i2_enabled ]; then echo $YS"i2)"$CE; else echo $PS"i2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[9]}; else eval echo '${'$batchlist'[9]}'; fi)"$CE
  echo -e $LOGOC"              ::::::  :    : :::::  :    :   :   : :       ::::  "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "j1)"; elif [ $j2_enabled ]; then echo $YS"j2)"$CE; else echo $PS"j2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[10]}; else eval echo '${'$batchlist'[10]}'; fi)"$CE
  echo -e $LOGOC"              :   :   :    : :    : :    :   :   : :           : "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "k1)"; elif [ $k2_enabled ]; then echo $YS"k2)"$CE; else echo $PS"k2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[11]}; else eval echo '${'$batchlist'[11]}'; fi)"$CE
  echo -e $LOGOC"              :    :  :    : :    : :    :   :   : :    : :    : "$CE $PS"               $(if  ! [ $batchlist ] ;then echo "l1)"; elif [ $l2_enabled ]; then echo $YS"l2)"$CE; else echo $PS"l2)"$CE; fi)    $(if ! [ $batchlist ]; then echo ${batches[12]}; else eval echo '${'$batchlist'[12]}'; fi)"$CE
  echo -e $LOGOC"              :     :  ::::  :::::   ::::    :   :  ::::   ::::  "$CE" by DAVID TRAVERS,"
  echo -e "                                                                     ORKHAN GULIYEV,"
  echo -e "                                                                     DANIEL BRNE"  
  echo ""
}

function columnize {
  columns=$1
  shift
  colwidth=$(echo $((COLUMNS / columns)))
  printf "$(echo -e $(for var in $(seq 1 $columns); do echo -e "%-$(echo $colwidth)s "; done))\n" "$@";
}

function menu_list {
  load_batch_lists
  
  num=0
  for letter in ${alphabet[@]}; do
    let "num=num+1"
    if [[ $(eval echo '$'$letter) > 0 ]]; then 
        eval 'menu_item'$num'="$(if [[ $'$letter' = " " ]]; then echo " "; else echo -e $FONTC"  $num"$CE" - "$'$letter'; fi)"'
    else
        continue
    fi
  done

  item_count=0
  for item in 'menu_item'{1..102}; do
    if [[ $(eval echo '$'$item) = "" ]] ; then 
      continue
    else
      let "item_count=item_count+1"
    fi
  done
  total_menu_items=$item_count
  items_per_column=$(($total_menu_items/3))
  last_item_first_column=$items_per_column
  first_item_second_column=$(($last_item_first_column + 1))
  last_item_second_column=$(($items_per_column * 2))
  first_item_third_column=$(($last_item_second_column + 1))
  last_item_third_column=$(($items_per_column * 3))

  PH=0
  for item in {1..$last_item_first_column}; do 
      let "PH=PH+1"
      eval 'placeholder'$PH'=$menu_item'$item
  done
  PH=25
  for item in {$first_item_second_column..$last_item_second_column}; do
      let "PH=PH+1"
      eval 'placeholder'$PH'=$menu_item'$item 
  done
  PH=50
  for item in {$first_item_third_column..$last_item_third_column}; do 
      let "PH=PH+1"
      eval 'placeholder'$PH'=$menu_item'$item 
  done
    logo

  #Display Menu
	columnize 4 $placeholder1  $placeholder26  $placeholder51 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    new) $CE    Create a batch list"; fi)"
    columnize 4 $placeholder2  $placeholder27  $placeholder52 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS  close) $CE    Delete current list"; fi)"
    columnize 4 $placeholder3  $placeholder28  $placeholder53 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    add) $CE    Add drive(s) to list"; fi)"
    columnize 4 $placeholder4  $placeholder29  $placeholder54 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    del) $CE    Remove drive(s) from list"; fi)"
    columnize 4 $placeholder5  $placeholder30  $placeholder55 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    all) $CE    Select all drives in list"; fi)"
    columnize 4 $placeholder6  $placeholder31  $placeholder56 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS   none) $CE    Unselect all drives in list"; fi)" 
    columnize 4 $placeholder7  $placeholder32  $placeholder57 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS   done) $CE    Mark drive(s) as done"; fi)"
    if [[ $items_per_column > 8 ]]; then columnize 4 $placeholder9  $placeholder34  $placeholder59 "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    review) $CE    Review completed drives"; fi)"; else columnize 4 "$(echo -e $BLS"."$CE)" "$(echo -e $BLS"."$CE)" "$(echo -e $BLS"."$CE)" "$(if [[ $HOSTNAME == *'node'* ]]; then  echo -e "$YS    review) $CE    Review completed drives"; fi)"; fi
    if [[ $items_per_column > 9 ]]; then 
        columnize 4 $placeholder9  $placeholder34  $placeholder59
        if [[ $items_per_column > 10 ]]; then columnize 4 $placeholder10  $placeholder35  $placeholder60; fi
        if [[ $items_per_column > 11 ]]; then columnize 4 $placeholder11  $placeholder36  $placeholder61; fi
        if [[ $items_per_column > 12 ]]; then columnize 4 $placeholder12  $placeholder37  $placeholder62; fi
        if [[ $items_per_column > 13 ]]; then columnize 4 $placeholder13  $placeholder38  $placeholder63; fi
        if [[ $items_per_column > 14 ]]; then columnize 4 $placeholder14  $placeholder39  $placeholder64; fi
        if [[ $items_per_column > 15 ]]; then columnize 4 $placeholder15  $placeholder40  $placeholder65; fi
        if [[ $items_per_column > 16 ]]; then columnize 4 $placeholder16  $placeholder41  $placeholder66; fi
        if [[ $items_per_column > 17 ]]; then columnize 4 $placeholder17  $placeholder42  $placeholder67; fi
        if [[ $items_per_column > 18 ]]; then columnize 4 $placeholder18  $placeholder43  $placeholder68; fi
        if [[ $items_per_column > 19 ]]; then columnize 4 $placeholder19  $placeholder44  $placeholder69; fi
        if [[ $items_per_column > 20 ]]; then columnize 4 $placeholder20  $placeholder45  $placeholder70; fi
        if [[ $items_per_column > 21 ]]; then columnize 4 $placeholder21  $placeholder46  $placeholder71; fi
        if [[ $items_per_column > 22 ]]; then columnize 4 $placeholder22  $placeholder47  $placeholder72; fi
        if [[ $items_per_column > 23 ]]; then columnize 4 $placeholder23  $placeholder48  $placeholder73; fi
        if [[ $items_per_column > 24 ]]; then columnize 4 $placeholder24  $placeholder49  $placeholder74; fi
        if [[ $items_per_column > 25 ]]; then columnize 4 $placeholder25  $placeholder50  $placeholder75; fi
    fi
    echo " "
    echo -e "$RS" b"$CE- Go Back"
    echo -e "$RS" 0"$CE- Exit"
    echo " "
    echo -n "Choose: "
  }

function menu {
  if ! [[ $HOSTNAME == *'node'* ]]; then 
    drive_menu;
  else
    remote_menu;
  fi
}

function drive_menu {
	back=menu
	home=drive_menu


  
	a="Ping a Drive"; opt_a1=ping_drive;
  b="Diagnostics/DUSC"; opt_b1=dusc_util;
  c="Edit KSK File"; opt_c1=edit_ksk;
  d="Error Codes"; opt_d1=error_codes;
  e="Switch Port Conn."; opt_e1=not_installed;
  f="Check IP Address"; opt_f1=check_ip;
  g="Check Time & Date"; opt_g1=timecheck;
  h="Reset Wifi"; opt_h1=resetwifiremote;
	i="Reboot"; opt_i1=reboot_local;
	j="AutoProvision"; opt_j1=autoprovision;
	k="Correct Date & Time"; opt_k1=timechange;
	l="Subsytem Update"; opt_l1=subsystem_update;
	m="Battery Status"; opt_m1=drive_batt;
	n=""; opt_n1="";
  o=""; opt_o1="";
  p=""; opt_p1="";
  q=""; opt_q1="";
  r=""; opt_r1="";
  s=""; opt_s1="";
  t=""; opt_t1="";
  u=""; opt_u1="";
  v=""; opt_v1="";
  w=""; opt_w1="";
  x=""; opt_x1="";
  y=""; opt_y1="";
  z=""; opt_z1="";
  aa=""; opt_aa1="";
  ab=""; opt_ab1="";
  ac=""; opt_ac1="";
  ad=""; opt_ad1="";
  ae=""; opt_ae1="";
  af=""; opt_af1="";
  ag=""; opt_ag1="";
  ah=""; opt_ah1="";
  ai=""; opt_ai1="";
	menu_list
	read_input
	options
}
 
function remote_menu {
	back=menu
	home=remote_menu
	a="Ping a Drive"; opt_a1=ping_drive;
	b="SSH Into A Drive"; opt_b1=ssh_connect;
	c="Charge Drive"; opt_c1=charge_drive;
	d="AutoProvision"; opt_d1=autoprovision_remote;
	e="Reboot Drive"; opt_e1=reboot_remote;
	f="Put Drive To Sleep"; opt_f1=not_installed;
	g="Shutdown Drive"; opt_g1=shutdown_drive_remote;
  h="SubSystem Update"; opt_h1=subsystem_update_remote;
	i="Firmware Update"; opt_i1=firmware_update_remote;
  j="Diagnostics/DUSC"; opt_j1=remote_dusc;
  k="Firmware Error Logs"; opt_k1=fw_log;
  l="Camera Logs";opt_l1=camera_logs;
  m="SSH Into A Station"; opt_m1=station_ssh_remote;
  n="Reboot Station"; opt_n1=station_reboot_remote;
  o="Check Station"; opt_o1=station_check_remote;
  p="Reboot IDS"; opt_p1=station_reboot_ids_remote;
  q="Reset Station Audio"; opt_q1=station_audio_remote;
  r="Send Menu To Drive"; opt_r1=transfer_aru;
  s="Unregister Drive"; opt_s1=not_installed;
  t="Reset Drive's Wifi"; opt_t1=resetwifiremote;
  u="Drive Error Codes"; opt_u1=error_codes_remote;
  v=""; opt_v1="";
  w=""; opt_w1="";
  x=""; opt_x1="";
  y=""; opt_y1="";
  z=""; opt_z1="";
  aa=""; opt_aa1="";
  ab=""; opt_ab1="";
  ac=""; opt_ac1="";
  ad=""; opt_ad1="";
  ae=""; opt_ae1="";
  af=""; opt_af1="";
  ag=""; opt_ag1="";
  ah=""; opt_ah1="";
  ai=""; opt_ai1="";
	menu_list
	read_input
	options
}

#---------Prompts-----------------------------------------------------
YNYES="( $YS y $CE / $YS n $CE )( $YS Enter $CE =yes)"
YNNO="($YSy$CE/$YSn$CE)($YSEnter$CE=no)"
YNONLY="($YSy$CE/$YSn$CE)"
PAKT="Press $YSany key$CE to"
P0TE="Press $YS0$CE to exit..."
PBTGB="Press $YS [b] $CE to go back..."
NUM="Choose: "

function read_input {
	read -r ANSWER
	clear
}

function drive_prompt {
    logo
    echo -e $RS"Drive(s): "$CE
    read -A du
}

function choose_selected_prompt {
    logo
    echo -e $RS"\n$1 Selected Unit(s)? y/n\n"$CE
    prompt_num
}

function transfer_menu_prompt {
    echo -e $RS"\nWould You like to Transfer this Menu To The Drive(s)? y/n"$CE
    read menu_y_or_no
}

function good_drive_prompt {
    logo
    echo -ne $RS"\nGood Drive: "$CE;
    read -r goodDrive;
}

function station_prompt {
    logo
    echo -ne $RS"\nStation : "$CE;
    read -A du
}

function prompt_connection {
	echo -e $RS"Are You Plugged Into A Drive?"$CE
	printf "($YSy$CE/$YSn$CE)($YSEnter$CE=no)"
  read_input
}

function prompt_ynyes {
	printf "( $YS y $CE / $YS n $CE )( $YS Enter $CE =yes)"
	read_input
}

function prompt_ynno {
	printf "($YSy$CE/$YSn$CE)($YSEnter$CE=no)"
	read_input
}

function prompt_num {
	echo $NUM
	read_input
}

#---------Error-Messages-----------------------------------------------------

function error_msg_ynno {
	logo
	echo -e $RS"YOU DID NOT MAKE A CORRECT SELECTION."$CE
	printf "($YSy$CE/$YSn$CE)($YSEnter$CE=no)"
}

function error_msg_ynyes {
	logo
	echo -e $RS"YOU DID NOT MAKE A CORRECT SELECTION."$CE
	printf "( $YS y $CE / $YS n $CE )( $YS Enter $CE =yes)"
}

function error_msg_num {
	logo
	echo -e $RS"YOU DID NOT MAKE A CORRECT SELECTION."$CE
	go_back_or_exit
}

function not_installed {
  logo
  echo -e $RS"This Tool has Not Been Configured Yet. Sorry :)"
  go_back_or_exit
}

#---------Menu-Options-----------------------------------------------------

function options {
  if [[ "$ANSWER" = "0" ]]; then
		if ! [[ $HOSTNAME == *'node'* ]]; then 
      clear;
      exit;
    else
      kill $$;
    fi
	elif [[ "$ANSWER" = "1" ]]; then
		$opt_a1
	elif [[ "$ANSWER" = "2" ]]; then
		$opt_b1
	elif [[ "$ANSWER" = "3" ]]; then
		$opt_c1
	elif [[ "$ANSWER" = "4" ]]; then
		$opt_d1
	elif [[ "$ANSWER" = "5" ]]; then
		$opt_e1
	elif [[ "$ANSWER" = "6" ]]; then
		$opt_f1
	elif [[ "$ANSWER" = "7" ]]; then
		$opt_g1
	elif [[ "$ANSWER" = "8" ]]; then
		$opt_h1
	elif [[ "$ANSWER" = "9" ]]; then
		$opt_i1
	elif [[ "$ANSWER" = "10" ]]; then
		$opt_j1
	elif [[ "$ANSWER" = "11" ]]; then
		$opt_k1
	elif [[ "$ANSWER" = "12" ]]; then
		$opt_l1
	elif [[ "$ANSWER" = "13" ]]; then
		$opt_m1
	elif [[ "$ANSWER" = "14" ]]; then
		$opt_n1
	elif [[ "$ANSWER" = "15" ]]; then
		$opt_o1
	elif [[ "$ANSWER" = "16" ]]; then
		$opt_p1
	elif [[ "$ANSWER" = "17" ]]; then
		$opt_q1
	elif [[ "$ANSWER" = "18" ]]; then
		$opt_r1
	elif [[ "$ANSWER" = "19" ]]; then
		$opt_s1
	elif [[ "$ANSWER" = "20" ]]; then
		$opt_t1
	elif [[ "$ANSWER" = "21" ]]; then
		$opt_u1
	elif [[ "$ANSWER" = "22" ]]; then
		$opt_v1
	elif [[ "$ANSWER" = "23" ]]; then
		$opt_w1
	elif [[ "$ANSWER" = "24" ]]; then
		$opt_x1
	elif [[ "$ANSWER" = "25" ]]; then
		$opt_y1
	elif [[ "$ANSWER" = "26" ]]; then
		$opt_z1
	elif [[ "$ANSWER" = "27" ]]; then
		$opt_aa1
	elif [[ "$ANSWER" = "28" ]]; then
		$opt_ab1
	elif [[ "$ANSWER" = "29" ]]; then
		$opt_ac1
	elif [[ "$ANSWER" = "30" ]]; then
		$opt_ad1
	elif [[ "$ANSWER" = "31" ]]; then
		$opt_ae1
	elif [[ "$ANSWER" = "32" ]]; then
		$opt_af1
	elif [[ "$ANSWER" = "33" ]]; then
		$opt_ag1
	elif [[ "$ANSWER" = "34" ]]; then
		$opt_ah1
	elif [[ "$ANSWER" = "35" ]]; then
		$opt_ai1
	elif [[ "$ANSWER" = "b" ]]; then
    unset batchlist
    $back
  elif [[ "$ANSWER" = "a1" ]]; then
    batchlist=$(echo ${batches[1]})
    menu
  elif [[ "$ANSWER" = "b1" ]]; then
    batchlist=$(echo ${batches[2]})
    menu
  elif [[ "$ANSWER" = "c1" ]]; then
    batchlist=$(echo ${batches[3]})
    menu
  elif [[ "$ANSWER" = "d1" ]]; then
    batchlist=$(echo ${batches[4]})
    menu
  elif [[ "$ANSWER" = "e1" ]]; then
    batchlist=$(echo ${batches[5]})
    menu
  elif [[ "$ANSWER" = "f1" ]]; then
    batchlist=$(echo ${batches[6]})
    menu
  elif [[ "$ANSWER" = "g1" ]]; then
    batchlist=$(echo ${batches[7]})
    menu
  elif [[ "$ANSWER" = "h1" ]]; then
    batchlist=$(echo ${batches[8]})
    menu
  elif [[ "$ANSWER" = "i1" ]]; then
    batchlist=$(echo ${batches[9]})
    menu
  elif [[ "$ANSWER" = "j1" ]]; then
    batchlist=$(echo ${batches[10]})
    menu
  elif [[ "$ANSWER" = "k1" ]]; then
    batchlist=$(echo ${batches[11]})
    menu
  elif [[ "$ANSWER" = "l1" ]]; then
    batchlist=$(echo ${batches[12]})
    menu
  elif [[ "$ANSWER" = "a2" ]]; then
    if [ $a2_enabled ]; then 
      unset a2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[1]}')})
    else
      du+=($(eval echo '${'$batchlist'[1]}'))
      a2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "b2" ]]; then
    if [ $b2_enabled ]; then 
      unset b2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[2]}')})
    else
      du+=($(eval echo '${'$batchlist'[2]}'))
      b2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "c2" ]]; then
    if [ $c2_enabled ]; then 
      unset c2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[3]}')})
    else
      du+=($(eval echo '${'$batchlist'[3]}'))
      c2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "d2" ]]; then
    if [ $d2_enabled ]; then 
      unset d2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[4]}')})
    else
      du+=($(eval echo '${'$batchlist'[4]}'))
      d2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "e2" ]]; then
    if [ $e2_enabled ]; then 
      unset e2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[5]}')})
    else
      du+=($(eval echo '${'$batchlist'[5]}'))
      e2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "f2" ]]; then
    if [ $f2_enabled ]; then 
      unset f2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[6]}')})
    else
      du+=($(eval echo '${'$batchlist'[6]}'))
      f2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "g2" ]]; then
    if [ $g2_enabled ]; then 
      unset g2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[7]}')})
    else
      du+=($(eval echo '${'$batchlist'[7]}'))
      g2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "h2" ]]; then
    if [ $h2_enabled ]; then 
      unset h2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[8]}')})
    else
      du+=($(eval echo '${'$batchlist'[8]}'))
      h2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "i2" ]]; then
    if [ $i2_enabled ]; then 
      unset i2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[9]}')})
    else
      du+=($(eval echo '${'$batchlist'[9]}'))
      i2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "j2" ]]; then
    if [ $j2_enabled ]; then 
      unset j2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[10]}')})
    else
      du+=($(eval echo '${'$batchlist'[10]}'))
      j2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "k2" ]]; then
    if [ $k2_enabled ]; then 
      unset k2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[11]}')})
    else
      du+=($(eval echo '${'$batchlist'[11]}'))
      k2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "l2" ]]; then
    if [ $l2_enabled ]; then 
      unset l2_enabled
      du=(${du[@]/$(eval echo '${'$batchlist'[12]}')})
    else
      du+=($(eval echo '${'$batchlist'[12]}'))
      l2_enabled="true"
    fi
    menu
  elif [[ "$ANSWER" = "new" ]]; then
    batch_mode
  elif [[ "$ANSWER" = "close" ]]; then
    delete_list
  elif [[ "$ANSWER" = "add" ]]; then
    add_drive
  elif [[ "$ANSWER" = "del" ]]; then
    delete_drive
  elif [[ "$ANSWER" = "all" ]]; then
    select_all
  elif [[ "$ANSWER" = "none" ]]; then
    clear_selection
  elif [[ "$ANSWER" = "done" ]]; then
    complete_drive
  elif [[ "$ANSWER" = "review" ]]; then
    review_completed_drives
  elif [[ "$ANSWER" = "" ]]; then
    menu
	else
  	error_msg_num
  	read_input
  	options
	fi
}



#---------Functions-----------------------------------------------------
function go_back_or_exit {
  echo " "
	printf "Press $YS [b] $CE to go back...\n"
	printf "Press $YS any key $CE to exit\n"
  echo " "
  if [[ $HOSTNAME == *'node'* ]]; then 
    read -k 1 ANSWER
  else
    read -n 1 ANSWER
  fi
	if [[ $ANSWER = b ]]; then
    batchlist=
    menu
	else
    clear
    batchlist=
		exit
	fi
}

function ping_drive {
  choose_selected_prompt Ping

  if [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
    drive_prompt
    i=0
    echo " "
    columnize 10 "Drive" "Wifi"

    for drive in ${du[@]}; do
      let "i=i+1"
      packet_loss=$(ping -w 1 -c 2 kdu-$drive | grep received | cut -d "," -f 3 | cut -d "%" -f 1)
      columnize 10 "$(echo -e $YS $i $CE)" "$drive" "$(if [[ $packet_loss == *"100"* ]]; then echo -e $RS"$(( 100 - $packet_loss))%"$CE; else echo -e $GNS"$(( 100 - $packet_loss))%"$CE; fi)"
    done

    echo " "
    echo " "

  elif [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
    i=0
    logo
    echo " "
    columnize 10 "Drive" "Wifi"

    for drive in ${du[@]}; do
      let "i=i+1"
      packet_loss=$(ping -w 1 -c 2 kdu-$drive | grep received | cut -d "," -f 3 | cut -d "%" -f 1)
      columnize 10 "$(echo -e $YS $i $CE)" "$drive" "$(if [[ $packet_loss == *"100"* ]]; then echo -e $RS"$(( 100 - $packet_loss))%"$CE; else echo -e $GNS"$(( 100 - $packet_loss))%"$CE; fi)"
    done

    echo " "
    echo " "

  else
    echo -e $RS"Something Went Wrong"
    go_back_or_exit
  fi
  go_back_or_exit
}

function ssh_connect {
  choose_selected_prompt SSH

  if [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
      drive_prompt
      transfer_menu_prompt
      if [[ $menu_y_or_no = 'y' ]] || [[ $menu_y_or_no = 'Y' ]]; then
        for drive in ${du[@]}; do
          echo -e $RS"\nCopying Menu to Drive $drive\n"$CE
          scp /tmp/ARUv2 root@kdu-$drive:/tmp/ARUv2
          echo -e $RS"\nStarting SSH Connection With Drive $drive\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 kdu-$drive
        done     
      elif [[ $menu_y_or_no = 'n' ]] || [[ $menu_y_or_no = 'N' ]]; then
        for drive in ${du[@]}; do
          echo -e $RS"\nStarting SSH Connection With Drive $drive\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 kdu-$drive
        done
      else
      echo -e $RS"Something Went Wrong"
      go_back_or_exit
      fi

  elif [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
      transfer_menu_prompt
      if [[ $menu_y_or_no = 'y' ]] || [[ $menu_y_or_no = 'Y' ]]; then
        for drive in ${du[@]}; do
          echo -e $RS"\nCopying Menu to Drive $drive\n"$CE
          scp /tmp/ARUv2 root@kdu-$drive:/tmp/ARUv2
          echo -e $RS"\nStarting SSH Connection With Drive $drive\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 kdu-$drive
        done
      elif [[ $menu_y_or_no = 'n' ]] || [[ $menu_y_or_no = 'N' ]]; then
        for drive in ${du[@]}; do
          echo -e $RS"\nStarting SSH Connection With Drive $drive\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 kdu-$drive
        done
      else
        echo -e $RS"Something Went Wrong"
        go_back_or_exit
      fi
  fi
  menu
}

function charge_drive {
	function prompt_floor {
		logo
		echo -e $RS"\nWhat Floor is The Drive On [i.e., 1-5]?"$CE
  		read floor
  		if [ $floor -ge 6 ]; then
	  		clear
	  		echo "You must enter a Number 1-5:"
	  		charge_drive
		fi
	}
	function prompt_drive {
    	drive_prompt
  		if [ $(echo $du | wc -c) -ne 7 ]; then
  			echo "The Drive Number is a Six-Digit Number. Please Try Agan."
  			prompt_drive
  		else
	  		prompt_charger
		fi
	}
	function prompt_charger {
    		logo
		echo -e $RS"\nWhat Charger Would You like to Send It To?"$CE
		read charger_unit
		if [ $charger_unit = "" ]; then
		  	clear
		  	echo "You must enter a Valid Number"
			prompt_charger
	  	else
			prompt_time
		fi
	}
	function prompt_time {
    		logo
		echo -e $RS"\nHow Long Do You Want It To Charge For?"$CE
		read time
		if [ $time -ge 180 ]; then
		  	clear
		  	echo "You must enter a Number 1-179:"
		  	prompt_time
		fi
	}

	choose_selected_prompt

	if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
		for i in $du; do
      echo "\n*In Order To Send This Drive To A Charger, You Must First Manage It In MMA*\n"
			prompt_floor
			prompt_charger
      echo "\nOnce The Drive is Done Charging, the Charger Will Become Blocked and You Will have to In Service Them Both\n"
			sudo -u kivasvs /apollo/env/FCXInfra/fwbin/chargeDrive.py -u $USER -c AMZN -w $FACILITY -z $(if [ $floor -le 5 ] &&  [ $floor -ge 2 ]; then echo "paKivaA0"$floor; elif [ $floor -eq 1 ]; then echo "scKivaA0"$floor; else echo "You must enter a Number 1-5:"; charge_drive; fi) -drive $i -charger $charger_unit -t $time && echo "\nThe Command Has Succesfully Been Sent\n"
		done
	elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
		prompt_floor
		prompt_drive
		sudo -u kivasvs /apollo/env/FCXInfra/fwbin/chargeDrive.py -u $USER -c AMZN -w $FACILITY -z $(if [ $floor -le 5 ] &&  [ $floor -ge 2 ]; then echo "paKivaA0"$floor; elif [ $floor -eq 1 ]; then echo "scKivaA0"$floor; else echo "You must enter a Number 1-5:"; charge_drive; fi) -drive $du -charger $charger_unit -t $time && echo "\nDrive $du has Succesfully Charged\n"
		go_back_or_exit
	fi
}

function error_codes { 
    echo -e $RS"\n************    Causes    *******************\n"$CE
    grep cause /var/log/dusc.log
    echo -e $RS"\n************   Warnings    *******************\n"$CE
    grep warn /var/log/dusc.log
    echo -e $RS"\n************    Errors    *******************\n"$CE
    grep error /var/log/dusc.log
    echo -e $RS"\n************    Faults    *******************\n"$CE
    grep fault /var/log/dusc.log
    echo -e $RS"\n************     ARIMA   *******************\n"$CE
    grep ARIMA /var/log/dusc.log
}

function firmware_update_remote {
    logo
    choose_selected_prompt

    if ! [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        logo
        echo -e $RS"\nDrive(s):"$CE
        read -A du
    fi

    logo
    echo -e $RS"\nWhat is the Current Version of Firmware You Are Updating The Drive To [Default=22.0]?"$CE
    read version
    if [[ $version -eq 0 ]]; then
        version=22.0
    fi

    for drive in ${du[@]}; do
        echo -e $RS"\nStarting Update on Drive $drive\n"$CE
        cd /apollo/env/FCXInfra/var/fcxfw/$version && sudo -u kivasvs ./update_drive.sh kdu-$drive && echo "The Update was Successful"
    done

    go_back_or_exit
}

function resetwifiremote {
	function prompt_drive {
    drive_prompt
		if [ $(echo $du | wc -c) -ne 7 ]; then
			echo "The Drive Number is a Six-Digit Number. Please Try Agan."
			prompt_drive
		else
			continue
		fi
		}
	choose_selected_prompt

	if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
		for drive in ${du[@]}; do
			echo "\nResetting WiFi on Drive $drive\n"
			sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -d kdu-$drive -c 'reset_wifi_config; exit;' -P 50
		done
	elif  [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
		prompt_drive 	
    for drive in ${du[@]}; do
      echo "\nResetting WiFi on Drive $drive\n"
		  sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -d kdu-$drive -c 'reset_wifi_config; exit;' -P 50
    done
	fi
	go_back_or_exit
}

function dusc_util {
    logo
    echo """
                              0=normal
                              1=Slowing
                              2=Limited
                              3=Stopping
                              4=immobilized unpowered"""
    dusc-util -m
    go_back_or_exit
}


function remote_dusc {
    choose_selected_prompt

    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        for drive in ${du[@]}; do
           logo
            echo -e $RS"""                      Drive $drive: DUSC Info$CE

                                    0=normal
                                    1=Slowing
                                    2=Limited
                                    3=Stopping
                                    4=immobilized unpowered"""
            sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$drive -c "dusc-util -m"
        done    
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        drive_prompt
        logo
        for drive in ${du[@]}; do
          echo -e $RS"""                         Drive $drive: DUSC Info$CE
          
                                  0=normal
                                  1=Slowing
                                  2=Limited
                                  3=Stopping
                                  4=immobilized unpowered"""
          sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$drive -c "dusc-util -m"
        done
    fi
    go_back_or_exit
}

function camera_logs {
  drive_prompt;
  echo -e $RS"\nGathering Camera Log Files From Drive $du\n"$CE
  cd /tmp && sudo -u kivasvs /apollo/env/FCXInfra/fwbin/get-hercules-logs.sh $du
  echo -e $RS"\n**In Order To View These Images, Use WinSCP to Transfer The Above File To Your PC**\n"$CE
  go_back_or_exit
}

function error_codes_remote {
    logo
    echo -e $RS"Selected Drive(s)? y/n"$CE
    prompt_num

    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        for drive in ${du[@]}; do
          echo -e $RS"\n>>>>>>>>>>>> GATHERING LOGS FOR $drive <<<<<<<<<<<<<<<<<<"$CE
          echo -e $RS"\n************    Causes    *******************\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$drive 'grep cause /var/log/dusc.log'
          echo -e $RS"\n************   Warnings    *******************\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$drive 'grep warn /var/log/dusc.log'
          echo -e $RS"\n************    Errors    *******************\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$drive 'grep error /var/log/dusc.log'
          echo -e $RS"\n************    Faults    *******************\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$drive 'grep fault /var/log/dusc.log'
          echo -e $RS"\n************    ARIMA    *******************\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$drive 'grep ARIMA /var/log/dusc.log'
          echo "\n\n\n\n\n"
        done    
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        logo
        echo -e $RS"\nDrive(s)"$CE
        read -A du
        for drive in ${du[@]}; do
          echo -e $RS"\n>>>>>>>>>>>> GATHERING LOGS FOR $drive <<<<<<<<<<<<<<<<<<"$CE
          echo -e $RS"\n************    Causes    *******************\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$drive 'grep cause /var/log/dusc.log'
          echo -e $RS"\n************   Warnings    *******************\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$drive 'grep warn /var/log/dusc.log'
          echo -e $RS"\n************    Errors    *******************\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$drive 'grep error /var/log/dusc.log'
          echo -e $RS"\n************    Faults    *******************\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$drive 'grep fault /var/log/dusc.log'
          echo -e $RS"\n************    ARIMA    *******************\n"$CE
          sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$drive 'grep ARIMA /var/log/dusc.log'
          echo "\n"
        done
    fi
    go_back_or_exit
}


function autoprovision {
  good_drive_prompt
	if ! [ -d /tmp/files ]; then mkdir /tmp/files; fi && scp root@kdu-$goodDU:/etc/wpa_supplicant/wpa_supplicant.conf  root@kdu-$goodDU:/etc/wpa_supplicant/amazon.pem  root@kdu-$goodDU:/etc/ksk/ksk.txt /tmp/files && mv /tmp/files/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf && mv /tmp/files/amazon.pem /etc/wpa_supplicant/amazon.pem && mv /tmp/files/ksk.txt /etc/ksk/ksk.txt && echo "Rebooting Now....." && reboot
  go_back_or_exit
}

function subsystem_update {
  logo;
  echo "";
  echo -e $RS"Available Components To Update:"$CE
  subsystem-update -l;
  echo "";
  echo -ne $RS"Subsystem Component(--all): "$CE;
  read -r sc;
  subsystem-update -f $sc
  go_back_or_exit
}

function timechange {
  good_drive_prompt
  date -s $(sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$du "timedatectl| grep Universal | cut -c 39-54 | sed -e 's/-/./g' -e 's/ /-/g'") && hwclock --systohc
}

function edit_ksk {
  vi /etc/ksk/ksk.txt
}

function timecheck {
  good_drive_prompt
  sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec  -t 10 kdu-$du "timedatectl | grep -n 1";
  timedatectl | grep -n 1
  go_back_or_exit
}

function check_ip {
  logo
	ip address
  go_back_or_exit
}

function fw_log {
  logo
  sudo -u kivasvs tail –f xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.log
  go_back_or_exit
}

function reboot_local {
  reboot
}

function reboot_remote {
  choose_selected_prompt

  if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
    logo
    for drive in ${du[@]}; do
      echo -e $RS"\nRebooting Drive $drive\n"$CE
      sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$drive -c '/sbin/reboot' &
    done
  elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
    logo
    echo -ne $RS"\nDrive: ";
    read -A du;
    for drive in ${du[@]}; do
      echo -e $RS"\nRebooting Drive $drive\n"$CE
      sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$drive -c '/sbin/reboot' &
    done
  fi
  
  go_back_or_exit
}

function drive_batt {
    ip -s -d link show dev can0
}

function subsystem_update_remote {
    choose_selected_prompt
    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        logo;
        echo ""
        echo -e $RS"\nAvailable Components To Update:\n"$CE
        sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$du[1] -c "subsystem-update -l"
        echo ""
        echo -ne $RS"Subsystem Component(--all): "$CE
        read -r sc
        for drive in ${du[@]}; do
           sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$drive -c "subsystem-update -f $sc"
        done    
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        logo;
        echo ""
        drive_prompt
        echo ""
        echo -e $RS"\nAvailable Components To Update:\n"$CE
        sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$du[1] -c "subsystem-update -l"
        echo ""
        echo -ne $RS"Subsystem Component(--all): "$CE
        read -r sc
        for drive in ${du[@]}; do
          sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$drive -c "subsystem-update -f $sc"
        done
    fi
    go_back_or_exit
}

function autoprovision_remote {
	choose_selected_prompt
	good_drive_prompt
	echo -e $RS"\nGathering All The Files from Drive $goodDrive\n"$CE
	if [ -d /tmp/files ]; then rm -r /tmp/files; fi
	sudo -u kivasvs /apollo/env/FCXInfra/bin/dussh -t 10 -d kdu-$goodDrive "mkdir /tmp/files && cp /etc/ksk/ksk.txt /tmp/files && cp /etc/wpa_supplicant/wpa_supplicant.conf /tmp/files && cp /etc/wpa_supplicant/amazon.pem /tmp/files"
	scp -r root@kdu-$goodDrive:/tmp/files /tmp/files

	if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
		for drive in ${du[@]}; do
			echo -e $RS"\nTransferring Files to Drive $drive\n"$CE
			scp -r /tmp/files root@kdu-$drive:/tmp/files
			sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$drive -c "mv /tmp/files/ksk.txt /etc/ksk/ksk.txt; mv /tmp/files/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf; mv /tmp/files/amazon.pem /etc/wpa_supplicant/amazon.pem; /sbin/reboot & exit"
			echo -e $RS"\n**FINISHED**\n"$CE
    done
	elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
		drive_prompt
    for drive in ${du[@]}; do
      echo -e $RS"\nTransferring Files to Drive $drive\n"$CE
      scp -r /tmp/files root@kdu-$drive:/tmp/files
      sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -t 10 -d kdu-$drive -c "mv /tmp/files/ksk.txt /etc/ksk/ksk.txt; mv /tmp/files/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf; mv /tmp/files/amazon.pem /etc/wpa_supplicant/amazon.pem; /sbin/reboot & exit"
      echo -e $RS"\n**FINISHED**\n"$CE
    done
	else	
		go_back_or_exit
	fi
	go_back_or_exit
}

function shutdown_drive_remote {
    choose_selected_prompt

    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        for drive in ${du[@]}; do
            echo -e $RS"Shutting Down Drive $i"$CE
           sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -d kdu-$i -c '/sbin/shutdown -h' &
        done    
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        echo -e $RS"Shutting Down Drive $du"$CE
        sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -d kdu-$du -c '/sbin/shutdown -h' &
    fi
    go_back_or_exit
}

function station_ssh_remote {
    logo
    choose_selected_prompt
    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        for station in ${du[@]}; do
            floor="paKivaA0$station[1]"
            echo -e $RS"\nStarting SSH Connection With Station $station\n"$CE
            sudo -u kivasvs /apollo/env/FCXInfra/bin/stnssh Station-$station.$facility-$floor.ar.corp.amazon.com
        done    
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        logo
        echo -e $RS"\nStation(s)"$CE
        read -A du
        for station in ${du[@]}; do
            floor="paKivaA0$station[1]"
            echo -e $RS"\nStarting SSH Connection With Station $station\n"$CE
            sudo -u kivasvs /apollo/env/FCXInfra/bin/stnssh Station-$station.$facility-$floor.ar.corp.amazon.com
        done
    fi
    go_back_or_exit
}

function station_reboot_remote {
    logo
    choose_selected_prompt
    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        for station in ${du[@]}; do
            floor="paKivaA0$station[1]"
            echo -e $RS"\nRebooting Station $station\n"$CE
            sudo -u kivasvs /apollo/env/FCXInfra/bin/mstnexec -s Station-$station.$facility-$floor.ar.corp.amazon.com -c "/opt/Station/rebootStation.sh"
            echo " "
        done    
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        logo
        echo -e $RS"\nStation(s)"$CE
        read -A du
        for station in ${du[@]}; do
            floor="paKivaA0$station[1]"
            echo -e $RS"\nRebooting Station $station\n"$CE
            sudo -u kivasvs /apollo/env/FCXInfra/bin/mstnexec -s Station-$station.$facility-$floor.ar.corp.amazon.com -c "/opt/Station/rebootStation.sh"
            echo " "
        done
    fi
    go_back_or_exit
}

function station_check_remote {
    logo
    choose_selected_prompt
    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        for station in ${du[@]}; do
            floor="paKivaA0$station[1]"
            echo -e $RS"\nRunning Check on Station $station\n"$CE
            sudo -u kivasvs /apollo/env/FCXInfra/bin/mstnexec -s Station-$station.$facility-$floor.ar.corp.amazon.com -c "checkStation.sh"
        done    
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        logo
        echo -e $RS"\nStation(s)"$CE
        read -A du
        for station in ${du[@]}; do
            floor="paKivaA0$station[1]"
            echo -e $RS"\nRunning Check on Station $station\n"$CE
            sudo -u kivasvs /apollo/env/FCXInfra/bin/mstnexec -s Station-$station.$facility-$floor.ar.corp.amazon.com -c "checkStation.sh"
        done
    fi
    go_back_or_exit
}

function station_reboot_ids_remote {
    logo
    choose_selected_prompt
    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        for station in ${du[@]}; do
            floor="paKivaA0$station[1]"
            echo -e $RS"\nRebooting IDS on Station $station\n"$CE
            sudo -u kivasvs /apollo/env/FCXInfra/bin/mstnexec -s Station-$station.$facility-$floor.ar.corp.amazon.com -c "cd /home/kiva && sudo -u kiva /opt/nike-ids/station/kill.sh && sudo -u kiva /opt/nike-ids/station/start.sh"
        done    
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        logo
        echo -e $RS"\nStation(s)"$CE
        read -A du
        for station in ${du[@]}; do
            floor="paKivaA0$station[1]"
            echo -e $RS"\nRebooting IDS on Station $station\n"$CE
            sudo -u kivasvs /apollo/env/FCXInfra/bin/mstnexec -s Station-$station.$facility-$floor.ar.corp.amazon.com -c "cd /home/kiva && sudo -u kiva /opt/nike-ids/station/kill.sh && sudo -u kiva /opt/nike-ids/station/start.sh"
        done
    fi
    go_back_or_exit
}

function station_audio_remote {
    logo
    choose_selected_prompt
    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        for station in ${du[@]}; do
            floor="paKivaA0$station[1]"
            echo -e $RS"\nFixing Audio on Station $station\n"$CE
            sudo -u kivasvs /apollo/env/FCXInfra/bin/mstnexec -s Station-$station.$facility-$floor.ar.corp.amazon.com -c "sudo -u kiva /opt/nike-station/helper/fixDisplaysAndAudio.sh"
        done    
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        logo
        echo -e $RS"\nStation(s)"$CE
        read -A du
        for station in ${du[@]}; do
            floor="paKivaA0$station[1]"
            echo -e $RS"\nFixing Audio on Station $station\n"$CE
            sudo -u kivasvs /apollo/env/FCXInfra/bin/mstnexec -s Station-$station.$facility-$floor.ar.corp.amazon.com -c "sudo -u kiva /opt/nike-station/helper/fixDisplaysAndAudio.sh"
        done
    fi
    go_back_or_exit
}

function transfer_aru_remote {
    logo
    choose_selected_prompt

    if [[ $ANSWER = "y" ]] || [[ $ANSWER = "Y" ]]; then
        for drive in ${du[@]}; do
            echo -e $RS"\nTransferring This Menu To Drive $drive\n"$CE
            scp /tmp/ARU root@kdu-$drive:/tmp/ARU
        done    
    elif [[ $ANSWER = "n" ]] || [[ $ANSWER = "N" ]]; then
        logo
        echo -e $RS"\nDrive(s)"$CE
        read -A du
        for drive in ${du[@]}; do
            echo -e $RS"\nTransferring This Menu To Drive $drive\n"$CE
            scp /tmp/ARU root@kdu-$drive:/tmp/ARU
        done
    fi
}

function aru {
  rm /tmp/ARUv2 && vi /tmp/ARUv2 && . /tmp/ARUv2
}

function batch_mode {
  logo

  #Starts Fresh by deleting old drives file
  rm /tmp/drives.txt

  #Creates a name for a new list
  echo -n "Create A Name for Your Batch List: "
  read -r batch_name

  #And adds the New List to a batch array containing all Lists
  batches+=($batch_name)

  #Creates a header inside a new file for future drives that are completed
  columnize 3 "Drive" "Action Completed" "Additional Notes" > /tmp/$batch_name-completed_drives.txt

  #Requests Drives that are to be added to List
  echo -e $RS"\n**Hit Ctrl-D to Complete the List**\n"$CE
  echo -n "Drives: "

  #And writes them to a file
  cat > /tmp/drives.txt

  #Filters all data in file to include only drive numbers
  sed -i "/u/d" /tmp/drives.txt
	sed -i "/s/d" /tmp/drives.txt
	sed -i "/\%/d" /tmp/drives.txt
	sed -i "/e/d" /tmp/drives.txt
	sed -i "/a/d" /tmp/drives.txt
  sed -i "/n/d" /tmp/drives.txt
  sed -i "/T/d" /tmp/drives.txt
  sed -i "/D/d" /tmp/drives.txt
  sed -i "/P/d" /tmp/drives.txt

  #Creates an identical batch array for drives.txt file 
  for i in $( cat /tmp/drives.txt); do 
    drives+=($i); 
  done
  logo

  #Visually Displays the drives and their internet connectivity
  num=0
  columnize 10 "Drive" "Wifi"
  for drive in $( cat /tmp/drives.txt); do
    #Increase the number by one to label drive
    let "num=num+1"
    #Set the connectivity of the drive to a variable
    packet_loss=$(ping -w 1 -c 2 kdu-$drive | grep received | cut -d "," -f 3 | cut -d "%" -f 1)
    #Display the drive's connectivity (i.e., 1   654567   100%)
    columnize 10 "$(echo -e $YS $num $CE)" "$drive" "$(if [[ $packet_loss == *"100"* ]]; then echo -e $RS"$(( 100 - $packet_loss))%"$CE; else echo -e $GNS"$(( 100 - $packet_loss))%"$CE; fi)"
  done

  #Prompts user to select from visual representation of connected drives
  echo -n "Select: "
  read -A selections

  #And adds each selection to an array identical to the batch name selected previously
  for select in ${selections[@]}; do
    eval $batch_name'+=('${drives[$select]}')'
  done

  #Resets the selections array
  selections=()

  #Saves all lists to a file to persist across new shells
  save_batch_lists

  #Resets drive file and drive array
  rm /tmp/drives.txt
  drives=()
  menu
}

function load_batch_lists {
  #Loads all batch lists from file into array
  batches=($(cat /tmp/batches))

  #For every drive in a batch list file, we are adding it to batch list array
  for batch in ${batches[@]}; do
    eval $batch'=('$(cat /tmp/$batch)')'     
  done
}

function save_batch_lists {
  #Saves all batches to batch file
  echo $batches > /tmp/batches

  #And adds all drives in batch array to batch file
  for batch in $batches; do
    eval "echo \${$batch}" > /tmp/$batch
  done
}

function delete_list {
  #Removes batch list from batches array
  batches=(${batches[@]/$batchlist})

  #Saves all batch lists
  save_batch_lists

  #Removes batchlist file and associated completed drives file
  rm /tmp/$batchlist
  rm /tmp/$batchlist-completed_drives.txt

  #Resets batchlist array
  batchlist=()
  reset
  . /tmp/ARUv2
}

function delete_drive {
  #Removes every selected drive from batchlist array
  for drive in ${du[@]}; do
    eval $batchlist'=(${'$batchlist'[@]/$drive})'
  done

  #Resets drive selection array
  du=()

  #Resets the current selection of drives to match their updated position in batchlist array
  i=0
  for var in a b c d e f g h i j k l m n o p q r s t u v w x y z; do
    let "i=i+1"
    if [ $(eval echo $"${var}2_enabled") ]; then 
        du+=($(eval echo '${'$batchlist'[$i]}'))
    fi
  done

  #Saves all batch lists
  save_batch_lists
  menu
}

function add_drive {
  logo
  #Resets drives array
  drives=()

  #Removes drives file
  rm /tmp/drives.txt

  #Prompts user for drives to add to drives file
  echo -e $RS"\n**Hit Ctrl-D to Complete the List**\n"$CE
  echo -n "Drives: "
  cat > /tmp/drives.txt

  #Filters drives file so only drive numbers exist
  sed -i "/u/d" /tmp/drives.txt
	sed -i "/s/d" /tmp/drives.txt
	sed -i "/\%/d" /tmp/drives.txt
	sed -i "/e/d" /tmp/drives.txt
	sed -i "/a/d" /tmp/drives.txt
  sed -i "/n/d" /tmp/drives.txt
  sed -i "/T/d" /tmp/drives.txt
  sed -i "/D/d" /tmp/drives.txt
  sed -i "/P/d" /tmp/drives.txt

  #Adds all drives in drives file to drives array
  for i in $( cat /tmp/drives.txt); do 
    drives+=($i); 
  done

  #Adds all drives from drives array to batchlist array
  eval $batchlist'+=($(eval echo '${drives[@]}'))'

  #Saves all batch lists
  save_batch_lists
  menu
}

function clear_selection {
  #Resets du array
  du=()

  #Clears all selected drives 
  for var in a b c d e f g h i j k l m n o p q r s t u v w x y z; do
    eval unset ${var}2_enabled
  done
  menu
}

function select_all {
  #Selects all drives
  du=($(eval echo '${'$batchlist'[@]}'))
  for var in a b c d e f g h i j k l m n o p q r s t u v w x y z; do
    eval ${var}2_enabled="true"
  done
  menu
}

function complete_drive {
  for drive in ${du[@]}; do 
    logo
    #Prompts user for Action Completed for each drive
    echo -e $RS"Action Completed For Drive $drive?\n"$CE
    read -r message
    logo

    #Prompts user for any additional Notes for Drive
    echo -e $RS"Any Additional Notes For Drive $drive?\n"$CE
    read -r notes
     
    #Adds completed drive info to completed drive file
    columnize 3 $drive $message $notes >> /tmp/$batchlist-completed_drives.txt
  done

  delete_drive
  clear_selection
  menu
}

function review_completed_drives {
  logo
  cat /tmp/$batchlist-completed_drives.txt
  go_back_or_exit
}

#-------Execution--------------------------------------------------------------------------------------------------
clear
logo
menu

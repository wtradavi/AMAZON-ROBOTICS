set opt interactive_comments

function logo {
  FONTC=$YS
  LOGOC=$RS
  YS="\e[1;33m"
  BS="\e[0;34m"
  CE="\e[0m"
  RS="\e[1;31m"
  BLS="\e[0;30m"
  DGYS="\e[1;30m"
  LBS="\e[1;34m"
  GNS="\e[0;32m"
  LGNS="\e[1;32m"
  CYS="\e[0;36m"
  LCYS="\e[1;36m"
  DRS="\e[0;31m"
  PS="\e[0;35m"
  LPS="\e[1;35m"
  BRS="\e[0;33m"
  LGYS="\e[0;37m"
  WHS="\e[1;37m" &&
  clear
  echo -e $GNS" Logged Into $HOSTNAME"$CE
  echo ""
  echo -e $LOGOC"                    : :   :    :   ::   ::::::  ::::  :    : "$CE
  echo -e $LOGOC"                   :   :  ::  ::  :  :      :  :    : ::   : "$CE
  echo -e $LOGOC"                  :     : : :: : :    :    :   :    : : :  : "$CE
  echo -e $LOGOC"                  ::::::: :    : ::::::   :    :    : :  : : "$CE
  echo -e $LOGOC"                  :     : :    : :    :  :     :    : :   :: "$CE
  echo -e $LOGOC"                  :     : :    : :    : ::::::  ::::  :    : "$CE
  echo -e $LOGOC"                                                                    "$CE
  echo -e $LOGOC"              ::::::                                             "$CE
  echo -e $LOGOC"              :     :  ::::  :::::   ::::  ::::: :  ::::   ::::  "$CE
  echo -e $LOGOC"              :     : :    : :    : :    :   :   : :    : :      "$CE
  echo -e $LOGOC"              ::::::  :    : :::::  :    :   :   : :       ::::  "$CE
  echo -e $LOGOC"              :   :   :    : :    : :    :   :   : :           : "$CE
  echo -e $LOGOC"              :    :  :    : :    : :    :   :   : :    : :    : "$CE
  echo -e $LOGOC"              :     :  ::::  :::::   ::::    :   :  ::::   ::::  "$CE" by DAVID TRAVERS"
  echo ""
}

function columnize {
  columns=$1
  shift
  colwidth=$(echo $((COLUMNS / columns)))
  printf "$(echo -e $(for i in $(seq 1 $columns); do echo -e "%-$(echo $colwidth)s "; done))\n" "$@";
}

function menu_list {
	logo
	columnize 3 "$(if [[ $a > 0 ]]; then echo -e $FONTC" 1"$CE" - "$a; else echo " " ; fi)" "$(if [[ $h > 0 ]]; then echo -e $FONTC" 8"$CE" - "$h; else echo " " ; fi)" "$(if [[ $o > 0 ]]; then echo -e $FONTC"15"$CE" - "$o; else echo " " ; fi)"
	columnize 3 "$(if [[ $b > 0 ]]; then echo -e $FONTC" 2"$CE" - "$b; else echo " " ; fi)" "$(if [[ $i > 0 ]]; then echo -e $FONTC" 9"$CE" - "$i; else echo " " ; fi)" "$(if [[ $p > 0 ]]; then echo -e $FONTC"16"$CE" - "$p; else echo " " ; fi)"
	columnize 3 "$(if [[ $c > 0 ]]; then echo -e $FONTC" 3"$CE" - "$c; else echo " " ; fi)" "$(if [[ $j > 0 ]]; then echo -e $FONTC"10"$CE" - "$j; else echo " " ; fi)" "$(if [[ $q > 0 ]]; then echo -e $FONTC"17"$CE" - "$q; else echo " " ; fi)"
	columnize 3 "$(if [[ $d > 0 ]]; then echo -e $FONTC" 4"$CE" - "$d; else echo " " ; fi)" "$(if [[ $k > 0 ]]; then echo -e $FONTC"11"$CE" - "$k; else echo " " ; fi)" "$(if [[ $r > 0 ]]; then echo -e $FONTC"18"$CE" - "$r; else echo " " ; fi)"
	columnize 3 "$(if [[ $e > 0 ]]; then echo -e $FONTC" 5"$CE" - "$e; else echo " " ; fi)" "$(if [[ $l > 0 ]]; then echo -e $FONTC"12"$CE" - "$l; else echo " " ; fi)" "$(if [[ $s > 0 ]]; then echo -e $FONTC"19"$CE" - "$s; else echo " " ; fi)"
	columnize 3 "$(if [[ $f > 0 ]]; then echo -e $FONTC" 6"$CE" - "$f; else echo " " ; fi)" "$(if [[ $m > 0 ]]; then echo -e $FONTC"13"$CE" - "$m; else echo "                                          " ; fi)"
	columnize 3 "$(if [[ $g > 0 ]]; then echo -e $FONTC" 7"$CE" - "$g; else echo " " ; fi)" "$(if [[ $n > 0 ]]; then echo -e $FONTC"14"$CE" - "$n; else echo "                                          " ; fi)"
  echo -e "$RS" b"$CE- Go Back"
  echo -e "$RS" 0"$CE- Exit"
	echo "Choose:"
  }

function menu {
  if [ $HOSTNAME != "ar-movement-syr1-node1.syr1.amazon.com" ]; then
    drive_menu;
  else
    remote_menu;
  fi
}



function drive_menu {
	back=menu
	home=drive_menu
	a="Ping a Drive";h="Reset Wifi";o="";
	b="Diagnostics/DUSC";i="Reboot";p="";
	c="Edit KSK File";j="AutoProvision";q="";
	d="Error Codes";k="Correct Date & Time";r="";
	e="Switch Port Connection";l="Subsytem Update";s="";
	f="Camera Logs";m="Check IP Address";
	g="Check Time & Date";n="";
	#OPTIONS
	a1=ping_drive;h1=resetwifiremote;o1="";
	b1=dusc_util;i1=reboot_local;p1="";
	c1=edit_ksk;j1=autoprovision;q1="";
	d1=not_installed;k1=timechange;r1="";
	e1=not_installed;l1=subsystem_update;s1="";
	f1=camera_logs;m1=check_ip;
	g1=timecheck;n1="";
	menu_list
	read_input
	options
}



function remote_menu {
	back=menu
	home=remote_menu
	a="Ping a Drive";h="Reboot Drive";o="";
	b="SSH Into A Drive";i="Firmware Update";p="";
	c="Send Drive To Charger";j="Diagnostics/DUSC";q="";
	d="Error Codes";k="SSH Into A Station";r="";
	e="Reset Drive's Wifi Config";l="Firmware Error Logs";s="";
	f="Put Drive To Sleep";m="Transfer This Menu To A Drive";
	g="Unregister Drive";n="";
	#OPTIONS
	a1=ping_drive;h1=reboot_remote;o1="";
	b1=ssh_connect;i1=firmware_update_remote;p1="";
	c1=charge_drive;j1=dusc_util;q1="";
	d1=not_installed;k1=station_ssh;r1="";
	e1=resetwifiremote;l1=fw_log;s1="";
	f1=not_installed;m1=transfer_aru;
	g1=not_installed;n1="";
	menu_list
	read_input
	options
}

#---------Prompts-----------------------------------------------------
YNYES="( $YS y $CE / $YS n $CE )( $YS Enter $CE =yes)"
YNNO="($YSy$CE/$YSn$CE)($YSEnter$CE=no)"
YNONLY="($YSy$CE/$YSn$CE)"
PAKT="Press $YSany key$CE to"
P0TE="Press $YS0$CE to exit..."
PBTGB="Press $YS [b] $CE to go back..."
NUM="Choose: "

function read_input {
	read -r ANSWER
	clear
}

function prompt_connection {
	echo -e $RS"Are You Plugged Into A Drive?"$CE
	printf "($YSy$CE/$YSn$CE)($YSEnter$CE=no)"
  read_input
}

function prompt_ynyes {
	printf "( $YS y $CE / $YS n $CE )( $YS Enter $CE =yes)"
	read_input
}

function prompt_ynno {
	printf "($YSy$CE/$YSn$CE)($YSEnter$CE=no)"
	read_input
}

function prompt_num {
	echo $NUM
	read_input
}

#---------Error-Messages-----------------------------------------------------

function error_msg_ynno {
	logo
	echo -e $RS"YOU DID NOT MAKE A CORRECT SELECTION."$CE
	printf "($YSy$CE/$YSn$CE)($YSEnter$CE=no)"
}

function error_msg_ynyes {
	logo
	echo -e $RS"YOU DID NOT MAKE A CORRECT SELECTION."$CE
	printf "( $YS y $CE / $YS n $CE )( $YS Enter $CE =yes)"
}

function error_msg_num {
	logo
	echo -e $RS"YOU DID NOT MAKE A CORRECT SELECTION."$CE
	go_back_or_exit
}

function not_installed {
  logo
  echo -e $RS"This Tool has Not Been Configured Yet. Sorry :)"
  go_back_or_exit
}

#---------Menu-Options-----------------------------------------------------

function options {
  if [[ "$ANSWER" = "0" ]]; then
		if [ $HOSTNAME != "ar-movement-syr1-node1.syr1.amazon.com" ]; then
      clear;
      exit;
    else
      kill $$;
    fi
	elif [[ "$ANSWER" = "1" ]]; then
		$a1
	elif [[ "$ANSWER" = "2" ]]; then
		$b1
	elif [[ "$ANSWER" = "3" ]]; then
		$c1
	elif [[ "$ANSWER" = "4" ]]; then
		$d1
	elif [[ "$ANSWER" = "5" ]]; then
		$e1
	elif [[ "$ANSWER" = "6" ]]; then
		$f1
	elif [[ "$ANSWER" = "7" ]]; then
		$g1
	elif [[ "$ANSWER" = "8" ]]; then
		$h1
	elif [[ "$ANSWER" = "9" ]]; then
		$i1
	elif [[ "$ANSWER" = "10" ]]; then
		$j1
	elif [[ "$ANSWER" = "11" ]]; then
		$k1
	elif [[ "$ANSWER" = "12" ]]; then
		$l1
	elif [[ "$ANSWER" = "13" ]]; then
		$m1
	elif [[ "$ANSWER" = "14" ]]; then
		$n1
	elif [[ "$ANSWER" = "15" ]]; then
		$o1
	elif [[ "$ANSWER" = "16" ]]; then
		$p1
	elif [[ "$ANSWER" = "17" ]]; then
		$q1
	elif [[ "$ANSWER" = "18" ]]; then
		$r1
	elif [[ "$ANSWER" = "19" ]]; then
		$s1
	elif [[ "$ANSWER" = "b" ]]; then
		$back
  elif [[ "$ANSWER" = "" ]]; then
    menu
	else
  	error_msg_num
  	read_input
  	options
	fi
}



#---------Functions-----------------------------------------------------
function go_back_or_exit {
	printf "Press $YS [b] $CE to go back...\n"
	printf "Press $YS any key $CE to exit\n"
  if [ "$HOST" = ar-movement-syr1-node1.syr1.amazon.com ]; then
    read -k 1 ANSWER
  else
    read -n 1 ANSWER
  fi
	if [[ "$ANSWER" = "b" ]]; then
		$back
	else
    clear
		exit
	fi
}

function ping_drive {
  logo
  echo -e $RS"1- Hide The Bullshit"$CE
  echo -e $RS"2- Show Everything"$CE
  prompt_num
  logo
	echo -e $RS"What is the Drive Number That You Would like to Ping?"$CE
	read drive_unit
  logo
  if [[ $ANSWER = 1 ]]; then
    echo -e $FONTC"This Drive Has Received "$CE $GNS$(( 100 - $(ping -c 3 kdu-$drive_unit | grep received | cut -d "," -f 3 | cut -d "%" -f 1)))"%"$CE $FONTC" of Packets that It Transmitted."$CE
  elif [[ $ANSWER = 2 ]]; then
    ping -c 3 kdu-$drive_unit
  else
    echo -e $RS"Something Went Wrong"
    go_back_or_exit
  fi
	go_back_or_exit
}

function ssh_connect {
  logo
	echo -e $RS"\nWhat is the Drive Number That You Would like to SSH Into?"$CE
	read drive_unit
	logo
  scp /tmp/ARU root@kdu-$drive_unit:/tmp/ARU
	ssh root@kdu-$drive_unit
	menu
}

function charge_drive {
	function prompt_floor {
    logo
		echo -e $RS"\nWhat Floor is The Drive On [i.e., 1-5]?"$CE
  	read floor
  	if [ $floor -ge 6 ]; then
	  	clear
	  	echo "You must enter a Number 1-5:"
	  	charge_drive
  	else
		prompt_drive
		fi
	}
	function prompt_drive {
    logo
		echo -e $RS"\nWhat is the Drive Number That You Would like to Send To The Charger?"$CE
  	read drive_unit
  	if [ $(echo $drive_unit | wc -c) -ne 7 ]; then
  		echo "The Drive Number is a Six-Digit Number. Please Try Agan."
  		prompt_drive
  	else
	  	prompt_charger
		fi
	}
	function prompt_charger {
    logo
		echo -e $RS"\nWhat Charger Would You like to Send It To?"$CE
		read charger_unit
		if [ $charger_unit = "" ]; then
		  	clear
		  	echo "You must enter a Valid Number"
			prompt_charger
	  	else
			prompt_time
		fi
	}
	function prompt_time {
    logo
		echo -e $RS"\nHow Long Do You Want It To Charge For?"$CE
		read time
		if [ $time -ge 180 ]; then
		  	clear
		  	echo "You must enter a Number 1-180s:"
		  	prompt_time
	  	else
			execute
		fi
	}
	function execute {
		sudo -u kivasvs /apollo/env/FCXInfra/fwbin/chargeDrive.py -c AMZN -w SYR1 -z $(if [ $floor -le 5 ] &&  [ $floor -ge 2 ]; then echo "paKiva0"$floor; elif [ $floor -eq 1 ]; then echo "saKiva0"$floor; else echo "You must enter a Number 1-5:"; charge_drive; fi) -drive $drive_unit -charger $charger_unit -t $time && echo "The Command Has Succesfully Been Sent"				:Real Code
		go_back_or_exit
	}
	prompt_floor
}

function firmware_update_remote {
	function prompt_drive {
    logo
		echo -e $RS"\nWhat is the Drive Number That You Would like to Update?"$CE
	  	read drive_unit
	  	if [ $(echo $drive_unit | wc -c) -ne 7 ]; then
	  		echo "The Drive Number is a Six-Digit Number. Please Try Agan."
	  		prompt_drive
	  	else
		  	prompt_version
		fi
	}
	function prompt_version {
      logo
		  echo -e $RS"\nWhat is the Current Version of Firmware You Are Updating The Drive To [Default=22.0]?"$CE
	  	read version
	  	if [[ $version -eq 0 ]]; then
	  		version=22.0
	  		execute
	  	else
		  	execute
		fi
	}
	function execute {
    logo
		cd /apollo/env/FCXInfra/var/fcxfw/$version && ./update_drive.sh kdu-$drive_unit && echo "The Update was Successful"
		go_back_or_exit
	}
	prompt_drive
	prompt_version
}

function resetwifiremote {
	function prompt_drive {
    logo
		echo -e $RS"\nWhat is the Drive Number That You Would like to Reset The Wifi on?"$CE
			read drive_unit
			if [ $(echo $drive_unit | wc -c) -ne 7 ]; then
				echo "The Drive Number is a Six-Digit Number. Please Try Agan."
				prompt_drive
			else
				prompt_version
			fi
		}
	sudo -u kivasvs /apollo/env/FCXInfra/bin/mduexec -d kdu-$drive_unit -c 'reset_wifi_config; exit;' -P 50
  go_back_or_exit
}

function dusc_util {
    logo
    echo """
                              0=normal
                              1=Slowing
                              2=Limited
                              3=Stopping
                              4=immobilized unpowered"""
    dusc-util -m
    go_back_or_exit
}

function camera_logs {
  logo
  echo -ne $RS"\nDrive #: "$CE;
  read -r du;
  cd /tmp && sudo -u kivasvs /apollo/env/FCXInfra/fwbin/get-hercules-logs.sh $du
}

function autoprovision {
  logo
	echo -ne $RS"\nGood Drive #: "$CE;
	read -r du;
	scp root@kdu-$du:/etc/ksk/ksk.txt /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/amazon.pem /tmp;
	mv /tmp/amazon.pem /etc/wpa_supplicant/;
	mv /tmp/ksk.txt /etc/ksk/;
	mv /tmp/wpa_supplicant.conf /etc/wpa_supplicant/
}

function subsystem_update {
  logo;
  echo "";
  echo -e $RS"Available Components To Update:"$CE
  subsystem-update -l;
  echo "";
  echo -ne $RS"Subsystem Component(--all): "$CE;
  read -r sc;
  subsystem-update -f $sc
  go_back_or_exit
}

function timechange {
  logo
  echo -ne $RS"\nGood Drive #: "$CE;
  read -r du;
  date -s $(ssh root@kdu-$du "timedatectl| grep Universal | cut -c 39-54 | sed -e 's/-/./g' -e 's/ /-/g'") && hwclock --systohc
}

function edit_ksk {
  vi /etc/ksk/ksk.txt
}

function timecheck {
  logo
  echo -ne $RS"\nGood Drive #: "$CE;
  read -r du;
  ssh root@kdu-$du "timedatectl | grep -n 1";
  timedatectl | grep -n 1
  go_back_or_exit
}

function check_ip {
  logo
	ip address
  go_back_or_exit
}

function fw_log {
  logo
  sudo -u kivasvs tail –f xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.log
  go_back_or_exit
}

function station_ssh {
  logo
  echo -ne $RS"\nStation #: "$CE;
  read -r su;
  logo
  echo -ne $RS"\nFloor: "$CE;
  read -r fu;
  logo
  sudo -u kivasvs /apollo/env/FCXInfra/bin/stnssh Station-$su.syr1-$( if [ $fu -le 5 ] &&  [ $fu -ge 2 ]; then echo "paKivaA0"$fu; elif [ $fu -eq 1 ]; then echo "saKivaA0"$fu; fi).ar.corp.amazon.com
}

function reboot_local {
  reboot
}

function reboot_remote {
  logo
  echo -ne $RS"\nDrive: ";
  read -r du;
  echo "reboot\n" | ssh root@kdu-$du
  go_back_or_exit
}

function transfer_aru {
  logo
  echo -ne $RS"\nDrive: "
  read du
  scp /tmp/ARU root@kdu-$du:/tmp/ARU
  go_back_or_exit
}

function aru {
  rm /tmp/ARU && vi /tmp/ARU && . /tmp/ARU
}

#-------Execution--------------------------------------------------------------------------------------------------
clear
logo
menu
